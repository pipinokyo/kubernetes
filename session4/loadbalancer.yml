# A LoadBalancer service is the standard way to expose applications externally in cloud-based Kubernetes clusters.
# It automatically provisions an external load balancer (AWS ALB, GCP Network LB, Azure LB, etc.) that distributes traffic to your pods.

#     Feature	                                      Description
# Cloud Integration	                Automatically provisions AWS ALB, GCP LB, etc.
# Stable External IP	              Gets a public IP/DNS name from your cloud provider
# Health Checks	                    Cloud LB automatically checks pod health
# SSL Termination	                  Can be configured at LB level (AWS ACM, GCP SSL Certificates)
# Scalability	                      Handles large traffic volumes via cloud infrastructure

# ✅ Production workloads needing high availability
# ✅ Public-facing web applications
# ✅ When you need cloud-native load balancing (autoscaling, DDoS protection)
# ✅ SSL/TLS termination at the load balancer
# ❌ Avoid for internal services (use ClusterIP instead)
# ❌ Can be expensive (cloud LBs often have hourly costs)

# This file defines a Kubernetes Service of type LoadBalancer for an application labeled "nginx".
# It specifies the selector to match the pods, the port that the service will expose, and the target port on the pods.
# This service will allow external traffic to access the application running in the pods.


apiVersion: v1                  # This line specifies the API version of the Kubernetes object.
kind: Service                   # This line indicates that the object is a Service.       
metadata:                       # This line begins the metadata section for the Service.         
  name: simple-lb               # This line sets the name of the Service.       
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer            # This line specifies that the Service type is LoadBalancer, which will provision an external load balancer. 